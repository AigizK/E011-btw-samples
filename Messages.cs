using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable UnusedMember.Local
namespace E005_testing_use_cases
{
    #region Generated by Lokad Code DSL
    
        
    
    [DataContract(Namespace = "E005")]
    public partial class ProduceCar : ICommand<FactoryId>
    {
        [DataMember(Order = 1)] public FactoryId Id { get; private set; }
        [DataMember(Order = 2)] public string EmployeeName { get; private set; }
        [DataMember(Order = 3)] public string CarModel { get; private set; }
        
        ProduceCar () {}
        public ProduceCar (FactoryId id, string employeeName, string carModel)
        {
            Id = id;
            EmployeeName = employeeName;
            CarModel = carModel;
        }
        
        public override string ToString()
        {
            return string.Format(@"Employee '{0}' produce car:{1}", EmployeeName, CarModel);
        }
    }
    
        
    
    [DataContract(Namespace = "E005")]
    public partial class CarProduced : IEvent<FactoryId>
    {
        [DataMember(Order = 1)] public FactoryId Id { get; private set; }
        [DataMember(Order = 2)] public string EmployeeName { get; private set; }
        [DataMember(Order = 3)] public string CarModel { get; private set; }
        [DataMember(Order = 4)] public CarPart[] Parts { get; private set; }
        
        CarProduced () 
        {
            Parts = new CarPart[0];
        }
        public CarProduced (FactoryId id, string employeeName, string carModel, CarPart[] parts)
        {
            Id = id;
            EmployeeName = employeeName;
            CarModel = carModel;
            Parts = parts;
        }
    }
    
        
    
    [DataContract(Namespace = "E005")]
    public partial class AssignEmployeeToFactory : ICommand<FactoryId>
    {
        [DataMember(Order = 1)] public FactoryId Id { get; private set; }
        [DataMember(Order = 2)] public string EmployeeName { get; private set; }
        
        AssignEmployeeToFactory () {}
        public AssignEmployeeToFactory (FactoryId id, string employeeName)
        {
            Id = id;
            EmployeeName = employeeName;
        }
        
        public override string ToString()
        {
            return string.Format(@"Assign employee '{0}'", EmployeeName);
        }
    }
    
        
    
    [DataContract(Namespace = "E005")]
    public partial class EmployeeAssignedToFactory : IEvent<FactoryId>
    {
        [DataMember(Order = 1)] public FactoryId Id { get; private set; }
        [DataMember(Order = 2)] public string EmployeeName { get; private set; }
        
        EmployeeAssignedToFactory () {}
        public EmployeeAssignedToFactory (FactoryId id, string employeeName)
        {
            Id = id;
            EmployeeName = employeeName;
        }
        
        public override string ToString()
        {
            return string.Format(@"new worker joins our forces: '{0}'", EmployeeName);
        }
    }
    
        
    
    [DataContract(Namespace = "E005")]
    public partial class CurseWordUttered : IEvent<FactoryId>
    {
        [DataMember(Order = 1)] public FactoryId Id { get; private set; }
        [DataMember(Order = 2)] public string TheWord { get; private set; }
        [DataMember(Order = 3)] public string Meaning { get; private set; }
        
        CurseWordUttered () {}
        public CurseWordUttered (FactoryId id, string theWord, string meaning)
        {
            Id = id;
            TheWord = theWord;
            Meaning = meaning;
        }
        
        public override string ToString()
        {
            return string.Format(@"'{0}' was heard within the walls. It meant:\r\n    '{1}'", TheWord, Meaning);
        }
    }
    
        
    
    [DataContract(Namespace = "E005")]
    public partial class ShipmentTransferredToCargoBay : IEvent<FactoryId>
    {
        [DataMember(Order = 1)] public FactoryId Id { get; private set; }
        [DataMember(Order = 2)] public InventoryShipment Shipment { get; private set; }
        
        ShipmentTransferredToCargoBay () {}
        public ShipmentTransferredToCargoBay (FactoryId id, InventoryShipment shipment)
        {
            Id = id;
            Shipment = shipment;
        }
    }
    
        
    
    [DataContract(Namespace = "E005")]
    public partial class TransferShipmentToCargoBay : ICommand<FactoryId>
    {
        [DataMember(Order = 1)] public FactoryId Id { get; private set; }
        [DataMember(Order = 2)] public string ShipmentName { get; private set; }
        [DataMember(Order = 3)] public CarPart[] Parts { get; private set; }
        
        TransferShipmentToCargoBay () 
        {
            Parts = new CarPart[0];
        }
        public TransferShipmentToCargoBay (FactoryId id, string shipmentName, CarPart[] parts)
        {
            Id = id;
            ShipmentName = shipmentName;
            Parts = parts;
        }
    }
    
        
    
    [DataContract(Namespace = "E005")]
    public partial class UnloadedFromCargoBay : IEvent<FactoryId>
    {
        [DataMember(Order = 1)] public FactoryId Id { get; private set; }
        [DataMember(Order = 2)] public string EmployeeName { get; private set; }
        [DataMember(Order = 3)] public InventoryShipment[] InventoryShipments { get; private set; }
        
        UnloadedFromCargoBay () 
        {
            InventoryShipments = new InventoryShipment[0];
        }
        public UnloadedFromCargoBay (FactoryId id, string employeeName, InventoryShipment[] inventoryShipments)
        {
            Id = id;
            EmployeeName = employeeName;
            InventoryShipments = inventoryShipments;
        }
    }
    
        
    
    [DataContract(Namespace = "E005")]
    public partial class UnloadShipmentFromCargoBay : ICommand<FactoryId>
    {
        [DataMember(Order = 1)] public FactoryId Id { get; private set; }
        [DataMember(Order = 2)] public string EmployeeName { get; private set; }
        
        UnloadShipmentFromCargoBay () {}
        public UnloadShipmentFromCargoBay (FactoryId id, string employeeName)
        {
            Id = id;
            EmployeeName = employeeName;
        }
        
        public override string ToString()
        {
            return string.Format(@"Unload the cargo '{0}'", EmployeeName);
        }
    }
    
        
    
    [DataContract(Namespace = "E005")]
    public partial class FactoryOpened : IEvent<FactoryId>
    {
        [DataMember(Order = 1)] public FactoryId Id { get; private set; }
        
        FactoryOpened () {}
        public FactoryOpened (FactoryId id)
        {
            Id = id;
        }
        
        public override string ToString()
        {
            return string.Format(@"Opened factory(ID='{0}')", Id);
        }
    }
    
        
    
    [DataContract(Namespace = "E005")]
    public partial class OpenFactory : ICommand<FactoryId>
    {
        [DataMember(Order = 1)] public FactoryId Id { get; private set; }
        
        OpenFactory () {}
        public OpenFactory (FactoryId id)
        {
            Id = id;
        }
        
        public override string ToString()
        {
            return string.Format(@"Open factory(ID='{0}')", Id);
        }
    }
    
    public interface IFactoryApplicationService
    {
        void When(ProduceCar c);
        void When(AssignEmployeeToFactory c);
        void When(TransferShipmentToCargoBay c);
        void When(UnloadShipmentFromCargoBay c);
        void When(OpenFactory c);
    }
    
    public interface IFactoryState
    {
        void When(CarProduced e);
        void When(EmployeeAssignedToFactory e);
        void When(CurseWordUttered e);
        void When(ShipmentTransferredToCargoBay e);
        void When(UnloadedFromCargoBay e);
        void When(FactoryOpened e);
    }
    #endregion
}
